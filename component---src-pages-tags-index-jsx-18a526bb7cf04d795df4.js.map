{"version":3,"sources":["webpack:///./src/components/TagCard/tags.module.less","webpack:///./src/track/index.js","webpack:///./src/components/TagCard/index.jsx","webpack:///./src/pages/tags/index.jsx"],"names":["module","exports","trackBlog","path","trackCustomEvent","category","action","value","trackTag","TagCard","props","img","name","description","color","tagPage","Config","pages","tag","className","style","tagCard","to","Utils","resolvePageUrl","onClick","tagImg","backgroundImage","pd20px","Tags","data","allFile","edges","tagData","tags","_edges","Object","keys","map","find","e","node","Header","title","Sidebar","gutter","val","key","xs","sm","md","lg","childImageSharp","fluid","src"],"mappings":"iFACAA,EAAOC,QAAU,CAAC,QAAU,8BAA8B,OAAS,6BAA6B,OAAS,+B,oCCDzG,oFAEO,MAAMC,EAAYC,IACvBC,2BAAiB,CAEfC,SAAU,OAEVC,OAAQ,QAERC,MAAOJ,KAIEK,EAAWL,IACtBC,2BAAiB,CACfC,SAAU,MACVC,OAAQ,QACRC,MAAOJ,M,mQCqBIM,MA/BCC,IACd,MAAM,IAAEC,EAAF,KAAOC,EAAP,YAAaC,EAAb,MAA0BC,GAAUJ,EACpCK,EAAUC,IAAOC,MAAMC,IAE7B,OACE,kBAAC,OAAD,CACEC,UAAWC,IAAMC,QACjBC,GAAIC,IAAMC,eACRT,EACS,aAATH,EAAsB,wCAA0CA,GAElEa,QAAS,IAAMjB,YAASe,IAAMC,eAAeT,EAASH,KAEtD,yBAAKO,UAAWC,IAAMC,SACpB,yBACEF,UAAWC,IAAMM,OACjBN,MAAO,CACLO,gBAAkB,OAAMhB,QAG5B,yBAAKQ,UAAWC,IAAMQ,QACpB,yBAAKT,UAAU,cACb,wBAAIC,MAAO,CAAEN,UAAb,IAAwBF,IAE1B,2BAAIC,OC0CCgB,UAhEF,EAAGC,WACd,MACEC,SAAS,MAAEC,IACTF,EACEG,EAAUjB,IAAOkB,KAEjBC,EAASC,OAAOC,KAAKJ,GAASK,IAAIpB,GAC/Bc,EAAMO,KAAKC,GAAKA,EAAEC,KAAK7B,OAASM,IAEzC,OACE,uBAAQC,UAAU,gBAChB,uBAAQA,UAAU,aAChB,kBAACuB,EAAA,EAAD,MACA,kBAAC,IAAD,CAAKC,MAAM,KAAK9B,YAAY,WAAWV,KAAK,SAC5C,kBAACyC,EAAA,EAAD,KACE,oCACE,yBAAKzB,UAAU,kBACb,wBAAIA,UAAU,iBAAd,QAEF,uBAAK0B,OAAQ,CAAC,GAAI,KACfV,EAAOG,IAAIQ,GACV,uBAAKC,IAAKD,EAAIL,KAAK7B,KAAMoC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GACnD,kBAAC,EAAD,CACExC,IAAKmC,EAAIL,KAAKW,gBAAgBC,MAAMC,IACpC1C,KAAMqB,EAAQa,EAAIL,KAAK7B,MAAMA,KAC7BC,YAAaoB,EAAQa,EAAIL,KAAK7B,MAAMC,YACpCC,MAAOmB,EAAQa,EAAIL,KAAK7B,MAAME","file":"component---src-pages-tags-index-jsx-18a526bb7cf04d795df4.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tagCard\":\"tags-module--tagCard--2sNqZ\",\"tagImg\":\"tags-module--tagImg--21WVr\",\"pd20px\":\"tags-module--pd20px--1m4en\"};","import { trackCustomEvent } from 'gatsby-plugin-google-analytics';\n//TODO: 傻逼了，google里还没设置白名单呢，track个屁呀...\nexport const trackBlog = path => {\n  trackCustomEvent({\n    // string - required - The object that was interacted with (e.g.video)\n    category: 'blog',\n    // string - required - Type of interaction (e.g. 'play')\n    action: 'Click',\n    // number - optional - Numeric value associated with the event. (e.g. A product ID)\n    value: path,\n  });\n};\n\nexport const trackTag = path => {\n  trackCustomEvent({\n    category: 'tag',\n    action: 'Click',\n    value: path,\n  });\n};\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport { trackTag } from '../../track';\nimport Config from '../../../config';\nimport Utils from '../../utils/pageUtils';\nimport style from './tags.module.less';\n\nconst TagCard = props => {\n  const { img, name, description, color } = props;\n  const tagPage = Config.pages.tag;\n\n  return (\n    <Link\n      className={style.tagCard}\n      to={Utils.resolvePageUrl(\n        tagPage,\n        name === '聪明人的个人成长' ? 'Personal Development for Smart People' : name\n      )}\n      onClick={() => trackTag(Utils.resolvePageUrl(tagPage, name))}\n    >\n      <div className={style.tagCard}>\n        <div\n          className={style.tagImg}\n          style={{\n            backgroundImage: `url(${img})`,\n          }}\n        />\n        <div className={style.pd20px}>\n          <div className=\"textCenter\">\n            <h3 style={{ color }}>#{name}</h3>\n          </div>\n          <p>{description}</p>\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nexport default TagCard;\n","import React from 'react';\nimport { Layout, Row, Col } from 'antd';\nimport { graphql } from 'gatsby';\nimport Header from '../../components/PageLayout/Header';\nimport SEO from '../../components/Seo';\nimport SidebarWrapper from '../../components/PageLayout/Sidebar';\nimport TagCard from '../../components/TagCard';\nimport Config from '../../../config';\n\nconst Tags = ({ data }) => {\n  const {\n    allFile: { edges },\n  } = data;\n  const tagData = Config.tags;\n  // 排序\n  const _edges = Object.keys(tagData).map(tag => {\n    return edges.find(e => e.node.name === tag);\n  });\n  return (\n    <Layout className=\"outerPadding\">\n      <Layout className=\"container\">\n        <Header />\n        <SEO title=\"标签\" description=\"追谏博客标签分类\" path=\"tags\" />\n        <SidebarWrapper>\n          <>\n            <div className=\"marginTopTitle\">\n              <h1 className=\"titleSeparate\">#标签</h1>\n            </div>\n            <Row gutter={[30, 20]}>\n              {_edges.map(val => (\n                <Col key={val.node.name} xs={24} sm={24} md={12} lg={8}>\n                  <TagCard\n                    img={val.node.childImageSharp.fluid.src}\n                    name={tagData[val.node.name].name}\n                    description={tagData[val.node.name].description}\n                    color={tagData[val.node.name].color}\n                  />\n                </Col>\n              ))}\n            </Row>\n          </>\n        </SidebarWrapper>\n      </Layout>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  {\n    allMarkdownRemark(filter: { fileAbsolutePath: { regex: \"/index.md$/\" } }) {\n      edges {\n        node {\n          frontmatter {\n            tags\n          }\n        }\n      }\n    }\n    allFile(filter: { relativeDirectory: { eq: \"tags\" } }) {\n      edges {\n        node {\n          name\n          childImageSharp {\n            fluid(maxWidth: 400) {\n              ...GatsbyImageSharpFluid_tracedSVG\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Tags;\n"],"sourceRoot":""}