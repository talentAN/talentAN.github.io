{"version":3,"sources":["webpack:///./src/templates/tags/index.jsx","webpack:///./src/templates/tags/tags.module.less"],"names":["TagPage","data","pageContext","tag","tagName","Config","tags","name","Utils","capitalize","tagPagePath","pages","tagImage","allFile","edges","find","edge","node","childImageSharp","fluid","posts","allMarkdownRemark","className","title","description","path","resolvePageUrl","keywords","style","tagsList","bannerImgContainer","bannerImg","alt","gutter","map","post","key","xs","sm","md","lg","module","exports"],"mappings":"wUA8FeA,UAhFC,EAAGC,OAAMC,kBACvB,MAAM,IAAEC,GAAQD,EACVE,EAAUC,IAAOC,KAAKH,GAAKI,MAAQC,IAAMC,WAAWN,GACpDO,EAAcL,IAAOM,MAAMR,IAC3BS,EAAWX,EAAKY,QAAQC,MAAMC,KAAKC,GAAQA,EAAKC,KAAKV,OAASJ,GAAKc,KAAKC,gBAC3EC,MACGC,EAAQnB,EAAKoB,kBAAkBP,MACrC,OACE,uBAAQQ,UAAU,gBAChB,uBAAQA,UAAU,aAChB,kBAAC,IAAD,MACA,kBAAC,IAAD,CACEC,MAAOnB,EACPoB,YAAc,KAAIpB,MAAYC,IAAOC,KAAKH,GAAKqB,mBAC/CC,KAAMjB,IAAMkB,eAAehB,EAAaP,GACxCwB,SAAU,CAACvB,KAEb,kBAAC,IAAD,KACE,yBAAKkB,UAAY,kBAAiBM,IAAMC,UACtC,gCAAMzB,GACN,yBAAKkB,UAAWM,IAAME,oBACpB,kBAAC,IAAD,CAAKR,UAAWM,IAAMG,UAAWZ,MAAOP,EAAUoB,IAAK5B,KAEzD,wBAAIkB,UAAU,cAAcjB,IAAOC,KAAKH,GAAKqB,cAE/C,uBAAKS,OAAQ,CAAC,GAAI,KACfb,EAAMc,IAAI,CAACC,EAAMC,IAChB,uBAAKA,IAAKA,EAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GACzC,kBAAC,IAAD,CAAUvC,KAAMkC,Y,qBCzChCM,EAAOC,QAAU,CAAC,SAAW,+BAA+B,mBAAqB,yCAAyC,UAAY","file":"component---src-templates-tags-index-jsx-0ca3eb88eb3d07769bcf.js","sourcesContent":["/* Vendor imports */\nimport React from 'react';\nimport { graphql } from 'gatsby';\nimport Img from 'gatsby-image';\nimport { Layout, Row, Col } from 'antd';\n/* App imports */\nimport SEO from '../../components/Seo';\nimport Header from '../../components/PageLayout/Header';\nimport PostCard from '../../components/PostCard';\nimport SidebarWrapper from '../../components/PageLayout/Sidebar';\nimport Config from '../../../config';\nimport Utils from '../../utils/pageUtils';\nimport style from './tags.module.less';\n\nconst TagPage = ({ data, pageContext }) => {\n  const { tag } = pageContext;\n  const tagName = Config.tags[tag].name || Utils.capitalize(tag);\n  const tagPagePath = Config.pages.tag;\n  const tagImage = data.allFile.edges.find(edge => edge.node.name === tag).node.childImageSharp\n    .fluid;\n  const posts = data.allMarkdownRemark.edges;\n  return (\n    <Layout className=\"outerPadding\">\n      <Layout className=\"container\">\n        <Header />\n        <SEO\n          title={tagName}\n          description={`关于${tagName}. ${Config.tags[tag].description}的所有博客`}\n          path={Utils.resolvePageUrl(tagPagePath, tag)}\n          keywords={[tagName]}\n        />\n        <SidebarWrapper>\n          <div className={`marginTopTitle ${style.tagsList}`}>\n            <h1>#{tagName}</h1>\n            <div className={style.bannerImgContainer}>\n              <Img className={style.bannerImg} fluid={tagImage} alt={tagName} />\n            </div>\n            <h4 className=\"textCenter\">{Config.tags[tag].description}</h4>\n          </div>\n          <Row gutter={[20, 20]}>\n            {posts.map((post, key) => (\n              <Col key={key} xs={24} sm={24} md={12} lg={8}>\n                <PostCard data={post} />\n              </Col>\n            ))}\n          </Row>\n        </SidebarWrapper>\n      </Layout>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query($tag: String!) {\n    allMarkdownRemark(\n      filter: { frontmatter: { tags: { in: [$tag] } }, fileAbsolutePath: { regex: \"/index.md$/\" } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            tags\n            excerpt\n            isTranslated\n            keywords\n            cover {\n              childImageSharp {\n                fluid(maxWidth: 600) {\n                  ...GatsbyImageSharpFluid_tracedSVG\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    allFile(filter: { name: { eq: $tag }, dir: { regex: \"/tags$/\" } }) {\n      edges {\n        node {\n          name\n          childImageSharp {\n            fluid(maxHeight: 600) {\n              ...GatsbyImageSharpFluid_tracedSVG\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default TagPage;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tagsList\":\"tags-module--tagsList--39vLn\",\"bannerImgContainer\":\"tags-module--bannerImgContainer--24LjU\",\"bannerImg\":\"tags-module--bannerImg--xzH6c\"};"],"sourceRoot":""}