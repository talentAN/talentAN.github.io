{"version":3,"sources":["webpack:///./src/components/TagCard/tags.module.less","webpack:///./src/components/TagCard/index.jsx","webpack:///./src/pages/tags/index.jsx"],"names":["module","exports","TagCard","props","img","name","description","color","tagPage","Config","pages","tag","className","style","tagCard","to","Utils","resolvePageUrl","disable","tagImg","backgroundImage","pd20px","Tags","data","allFile","edges","rawTags","allMarkdownRemark","map","edge","node","frontmatter","tags","reduce","prev","curr","concat","filter","index","indexOf","sort","tagData","Header","title","path","Sidebar","gutter","val","key","xs","sm","md","lg","childImageSharp","fluid","src"],"mappings":"iFACAA,EAAOC,QAAU,CAAC,QAAU,8BAA8B,OAAS,6BAA6B,OAAS,+B,uPC8B1FC,MAzBCC,IACd,MAAM,IAAEC,EAAF,KAAOC,EAAP,YAAaC,EAAb,MAA0BC,GAAUJ,EACpCK,EAAUC,IAAOC,MAAMC,IAG7B,MAAuB,mBAAhBL,EAAmC,KACxC,kBAAC,OAAD,CAAMM,UAAWC,IAAMC,QAASC,GAAIC,IAAMC,eAAeT,EAASH,GAAOa,SAAO,GAC9E,yBAAKN,UAAWC,IAAMC,SACpB,yBACEF,UAAWC,IAAMM,OACjBN,MAAO,CACLO,gBAAkB,OAAMhB,QAG5B,yBAAKQ,UAAWC,IAAMQ,QACpB,yBAAKT,UAAU,cACb,wBAAIC,MAAO,CAAEN,MAAQ,GAAEA,IAAvB,IAAoCF,IAEtC,2BAAIC,OCuDCgB,UAtEF,EAAGC,WACd,MACEC,SAAS,MAAEC,IACTF,EACEG,EAAUH,EAAKI,kBAAkBF,MACpCG,IAAIC,GAAQA,EAAKC,KAAKC,YAAYC,MAClCC,OAAO,CAACC,EAAMC,IAASD,EAAKE,OAAOD,IACtCT,EAAQW,OAAO,CAAC1B,EAAK2B,IAAUA,IAAUZ,EAAQa,QAAQ5B,IAAM6B,OAE/D,MAAMC,EAAUhC,IAAOuB,KACvB,OACE,uBAAQpB,UAAU,gBAChB,uBAAQA,UAAU,aAChB,kBAAC8B,EAAA,EAAD,MACA,kBAAC,IAAD,CACEC,MAAM,OACNrC,YAAY,kLAEZsC,KAAK,SAEP,kBAACC,EAAA,EAAD,KACE,oCACE,yBAAKjC,UAAU,kBACb,wBAAIA,UAAU,iBAAd,QAEF,uBAAKkC,OAAQ,CAAC,GAAI,KACfrB,EAAMG,IAAImB,GACT,uBAAKC,IAAKD,EAAIjB,KAAKzB,KAAM4C,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GACnD,kBAAC,EAAD,CACEhD,IAAK2C,EAAIjB,KAAKuB,gBAAgBC,MAAMC,IACpClD,KAAM0C,EAAIjB,KAAKzB,KACfC,YAAamC,EAAQM,EAAIjB,KAAKzB,MAAMC,YACpCC,MAAOkC,EAAQM,EAAIjB,KAAKzB,MAAME","file":"component---src-pages-tags-index-jsx-ded10437d524bb895033.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tagCard\":\"tags-module--tagCard--2sNqZ\",\"tagImg\":\"tags-module--tagImg--21WVr\",\"pd20px\":\"tags-module--pd20px--1m4en\"};","import React from 'react';\nimport { Link } from 'gatsby';\nimport Config from '../../../config';\nimport Utils from '../../utils/pageUtils';\nimport style from './tags.module.less';\n\nconst TagCard = props => {\n  const { img, name, description, color } = props;\n  const tagPage = Config.pages.tag;\n\n  //愚蠢的hardcode，哈哈哈哈哈哈\n  return description === 'to be added...' ? null : (\n    <Link className={style.tagCard} to={Utils.resolvePageUrl(tagPage, name)} disable>\n      <div className={style.tagCard}>\n        <div\n          className={style.tagImg}\n          style={{\n            backgroundImage: `url(${img})`,\n          }}\n        />\n        <div className={style.pd20px}>\n          <div className=\"textCenter\">\n            <h4 style={{ color: `${color}` }}>#{name}</h4>\n          </div>\n          <p>{description}</p>\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nexport default TagCard;\n","import React from 'react';\nimport { Layout, Row, Col } from 'antd';\nimport { graphql } from 'gatsby';\nimport Header from '../../components/PageLayout/Header';\nimport SEO from '../../components/Seo';\nimport SidebarWrapper from '../../components/PageLayout/Sidebar';\nimport TagCard from '../../components/TagCard';\nimport Config from '../../../config';\n\nconst Tags = ({ data }) => {\n  const {\n    allFile: { edges },\n  } = data;\n  const rawTags = data.allMarkdownRemark.edges\n    .map(edge => edge.node.frontmatter.tags)\n    .reduce((prev, curr) => prev.concat(curr));\n  rawTags.filter((tag, index) => index === rawTags.indexOf(tag)).sort(); // Remove duplicates and sort values\n  // const tagPage = Config.pages.tag;\n  const tagData = Config.tags;\n  return (\n    <Layout className=\"outerPadding\">\n      <Layout className=\"container\">\n        <Header />\n        <SEO\n          title=\"Tags\"\n          description=\"This page consists of various Tags on various technologies that I'll be using\n          to write blogs. You can check the blogs related to the tags by clicking on any of the tags below.\"\n          path=\"tags\"\n        />\n        <SidebarWrapper>\n          <>\n            <div className=\"marginTopTitle\">\n              <h1 className=\"titleSeparate\">#标签</h1>\n            </div>\n            <Row gutter={[30, 20]}>\n              {edges.map(val => (\n                <Col key={val.node.name} xs={24} sm={24} md={12} lg={8}>\n                  <TagCard\n                    img={val.node.childImageSharp.fluid.src}\n                    name={val.node.name}\n                    description={tagData[val.node.name].description}\n                    color={tagData[val.node.name].color}\n                  />\n                </Col>\n              ))}\n            </Row>\n          </>\n        </SidebarWrapper>\n      </Layout>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  {\n    allMarkdownRemark(filter: { fileAbsolutePath: { regex: \"/index.md$/\" } }) {\n      edges {\n        node {\n          frontmatter {\n            tags\n          }\n        }\n      }\n    }\n    allFile(filter: { relativeDirectory: { eq: \"tags\" } }) {\n      edges {\n        node {\n          name\n          childImageSharp {\n            fluid(maxWidth: 400) {\n              ...GatsbyImageSharpFluid_tracedSVG\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Tags;\n"],"sourceRoot":""}