{"version":3,"sources":["webpack:///./src/track/index.js","webpack:///./src/templates/tags/index.jsx","webpack:///./src/components/PostCard/index.jsx","webpack:///./src/templates/tags/tags.module.less","webpack:///./src/components/PostCard/postCard.module.less"],"names":["trackBlog","path","trackCustomEvent","category","action","value","trackTag","TagPage","data","pageContext","tag","tagName","Config","tags","name","Utils","capitalize","tagPagePath","pages","tagImage","allFile","edges","find","edge","node","childImageSharp","fluid","posts","allMarkdownRemark","className","title","description","resolvePageUrl","keywords","style","tagsList","bannerImgContainer","bannerImg","alt","gutter","map","post","key","xs","sm","md","lg","PostCard","props","frontmatter","isTop","hot","recommended","isTranslated","_title","excerpt","date","totalCount","showHot","showRecommended","contentUrl","label_viewed","formatNumber","postCard","onClick","to","postCardImg","backgroundImage","cover","src","backgroundPositionX","mrTp20","tips","dateHolder","moment","format","marginRight","module","exports"],"mappings":"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","file":"component---src-templates-tags-index-jsx-43163f48ccdfedefc83f.js","sourcesContent":["import { trackCustomEvent } from 'gatsby-plugin-google-analytics';\n//TODO: ÂÇªÈÄº‰∫ÜÔºågoogleÈáåËøòÊ≤°ËÆæÁΩÆÁôΩÂêçÂçïÂë¢Ôºåtrack‰∏™Â±ÅÂëÄ...\nexport const trackBlog = path => {\n  trackCustomEvent({\n    // string - required - The object that was interacted with (e.g.video)\n    category: 'blog',\n    // string - required - Type of interaction (e.g. 'play')\n    action: 'Click',\n    // number - optional - Numeric value associated with the event. (e.g. A product ID)\n    value: path,\n  });\n};\n\nexport const trackTag = path => {\n  trackCustomEvent({\n    category: 'tag',\n    action: 'Click',\n    value: path,\n  });\n};\n","/* Vendor imports */\nimport React from 'react';\nimport { graphql } from 'gatsby';\nimport Img from 'gatsby-image';\nimport { Layout, Row, Col } from 'antd';\n/* App imports */\nimport SEO from '../../components/Seo';\nimport Header from '../../components/PageLayout/Header';\nimport PostCard from '../../components/PostCard';\nimport SidebarWrapper from '../../components/PageLayout/Sidebar';\nimport Config from '../../../config';\nimport Utils from '../../utils/pageUtils';\nimport style from './tags.module.less';\n\nconst TagPage = ({ data, pageContext }) => {\n  const { tag } = pageContext;\n  const tagName = Config.tags[tag].name || Utils.capitalize(tag);\n  const tagPagePath = Config.pages.tag;\n  const tagImage = data.allFile.edges.find(edge => edge.node.name === tag).node.childImageSharp\n    .fluid;\n  const posts = data.allMarkdownRemark.edges;\n  return (\n    <Layout className=\"outerPadding\">\n      <Layout className=\"container\">\n        <Header />\n        <SEO\n          title={tagName}\n          description={`ÂÖ≥‰∫é${tagName}. ${Config.tags[tag].description}ÁöÑÊâÄÊúâÂçöÂÆ¢`}\n          path={Utils.resolvePageUrl(tagPagePath, tag)}\n          keywords={[tagName]}\n        />\n        <SidebarWrapper>\n          <div className={`marginTopTitle ${style.tagsList}`}>\n            <h1>#{tagName}</h1>\n            <div className={style.bannerImgContainer}>\n              <Img className={style.bannerImg} fluid={tagImage} alt={tagName} />\n            </div>\n            <h4 className=\"textCenter\">{Config.tags[tag].description}</h4>\n          </div>\n          <Row gutter={[20, 20]}>\n            {posts.map((post, key) => (\n              <Col key={key} xs={24} sm={24} md={12} lg={8}>\n                <PostCard data={post} />\n              </Col>\n            ))}\n          </Row>\n        </SidebarWrapper>\n      </Layout>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query ($tag: String!) {\n    allMarkdownRemark(\n      filter: { frontmatter: { tags: { in: [$tag] } }, fileAbsolutePath: { regex: \"/index.md$/\" } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            tags\n            excerpt\n            isTranslated\n            keywords\n            totalCount\n            cover {\n              childImageSharp {\n                fluid(maxWidth: 600) {\n                  ...GatsbyImageSharpFluid_tracedSVG\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    allFile(filter: { name: { eq: $tag }, dir: { regex: \"/tags$/\" } }) {\n      edges {\n        node {\n          name\n          childImageSharp {\n            fluid(maxHeight: 600) {\n              ...GatsbyImageSharpFluid_tracedSVG\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default TagPage;\n","import React from 'react';\nimport moment from 'moment';\nimport { Link } from 'gatsby';\nimport Utils from '../../utils/pageUtils';\nimport { formatNumber } from '../../utils/tools';\nimport { trackBlog } from '../../track';\nimport style from './postCard.module.less';\n\nconst PostCard = props => {\n  const {\n    data: {\n      node: { frontmatter = {} },\n    },\n  } = props;\n\n  const {\n    isTop = false, // ÁΩÆÈ°∂\n    hot = false, // ÁÉ≠Èó®\n    recommended = false,\n    isTranslated = false,\n    title: _title,\n    excerpt = '',\n    tags = [],\n    date = '',\n    path,\n    totalCount,\n  } = frontmatter;\n\n  const showHot = !!hot;\n  const showRecommended = !showHot && recommended;\n\n  const title = isTranslated ? `[ËØë] ${_title}` : _title;\n  const contentUrl = Utils.resolvePageUrl(path);\n  const label_viewed = `${formatNumber(totalCount)}ÈòÖ`;\n\n  return (\n    <div className={style.postCard} onClick={() => trackBlog(contentUrl)}>\n      <Link to={contentUrl}>\n        <div\n          className={style.postCardImg}\n          style={{\n            backgroundImage: frontmatter\n              ? `url(${frontmatter.cover.childImageSharp.fluid.src})`\n              : `url('')`,\n            backgroundPositionX: 'center',\n          }}\n        />\n      </Link>\n      <div className={style.mrTp20}>\n        <Link to={contentUrl}>\n          <p className={style.tips}>\n            <span className={style.dateHolder}>{moment(date).format('MMM Do YYYY')}</span>\n            <span className={style.totalCount}>{label_viewed}</span>\n          </p>\n          <h3>\n            {isTop && <span style={{ marginRight: '4px' }}>üìå</span>}\n            {showHot && <span style={{ marginRight: '4px' }}>üî•</span>}\n            {showRecommended && <span style={{ marginRight: '4px' }}>üëç</span>}\n            {title}\n          </h3>\n          <p>{excerpt}</p>\n        </Link>\n        <p>\n          {tags.map(tag => (\n            <Link\n              to={Utils.resolvePageUrl(\n                `tags/${tag === 'ËÅ™Êòé‰∫∫ÁöÑ‰∏™‰∫∫ÊàêÈïø' ? 'Personal Development for Smart People' : tag}`\n              )}\n              key={tag}\n            >\n              <span className={style.tag}>#{tag}</span>\n            </Link>\n          ))}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default PostCard;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tagsList\":\"tags-module--tagsList--39vLn\",\"bannerImgContainer\":\"tags-module--bannerImgContainer--24LjU\",\"bannerImg\":\"tags-module--bannerImg--xzH6c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postCard\":\"postCard-module--postCard--3vov_\",\"postCardImg\":\"postCard-module--postCardImg--yRYws\",\"mrTp20\":\"postCard-module--mrTp20--31jVy\",\"tips\":\"postCard-module--tips--2fTFF\",\"dateHolder\":\"postCard-module--dateHolder--k3h7B\",\"totalCount\":\"postCard-module--totalCount--2O7KS\",\"tag\":\"postCard-module--tag--3_3-1\"};"],"sourceRoot":""}