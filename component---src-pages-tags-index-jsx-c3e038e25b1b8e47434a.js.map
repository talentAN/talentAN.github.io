{"version":3,"sources":["webpack:///./src/components/TagCard/tags.module.less","webpack:///./src/track/index.js","webpack:///./src/components/TagCard/index.jsx","webpack:///./src/pages/tags/index.jsx"],"names":["module","exports","trackBlog","path","trackCustomEvent","category","action","value","trackTag","TagCard","props","img","name","description","color","tagPage","Config","pages","tag","className","style","tagCard","to","Utils","resolvePageUrl","onClick","tagImg","backgroundImage","pd20px","Tags","data","allFile","edges","rawTags","allMarkdownRemark","map","edge","node","frontmatter","tags","reduce","prev","curr","concat","filter","index","indexOf","sort","tagData","i","findIndex","t","i_last","length","Header","title","Sidebar","gutter","val","key","xs","sm","md","lg","childImageSharp","fluid","src"],"mappings":"iFACAA,EAAOC,QAAU,CAAC,QAAU,8BAA8B,OAAS,6BAA6B,OAAS,+B,oCCDzG,oFAEO,MAAMC,EAAYC,IACvBC,2BAAiB,CAEfC,SAAU,OAEVC,OAAQ,QAERC,MAAOJ,KAIEK,EAAWL,IACtBC,2BAAiB,CACfC,SAAU,MACVC,OAAQ,QACRC,MAAOJ,M,mQCkBIM,MA5BCC,IACd,MAAM,IAAEC,EAAF,KAAOC,EAAP,YAAaC,EAAb,MAA0BC,GAAUJ,EACpCK,EAAUC,IAAOC,MAAMC,IAE7B,OACE,kBAAC,OAAD,CACEC,UAAWC,IAAMC,QACjBC,GAAIC,IAAMC,eAAeT,EAASH,GAClCa,QAAS,IAAMjB,YAASe,IAAMC,eAAeT,EAASH,KAEtD,yBAAKO,UAAWC,IAAMC,SACpB,yBACEF,UAAWC,IAAMM,OACjBN,MAAO,CACLO,gBAAkB,OAAMhB,QAG5B,yBAAKQ,UAAWC,IAAMQ,QACpB,yBAAKT,UAAU,cACb,wBAAIC,MAAO,CAAEN,MAAQ,GAAEA,IAAvB,IAAoCF,IAEtC,2BAAIC,OC4DCgB,UA/EF,EAAGC,WACd,MACEC,SAAS,MAAEC,IACTF,EACEG,EAAUH,EAAKI,kBAAkBF,MACpCG,IAAIC,GAAQA,EAAKC,KAAKC,YAAYC,MAClCC,OAAO,CAACC,EAAMC,IAASD,EAAKE,OAAOD,IACtCT,EAAQW,OAAO,CAAC1B,EAAK2B,IAAUA,IAAUZ,EAAQa,QAAQ5B,IAAM6B,OAC/D,MAAMC,EAAUhC,IAAOuB,KAEjBU,EAAIjB,EAAMkB,UAAUC,GAAqB,QAAhBA,EAAEd,KAAKzB,MAChCwC,EAASpB,EAAMqB,OAAS,EAK9B,OAJIJ,IAAMG,KACPpB,EAAMiB,GAAIjB,EAAMoB,IAAW,CAACpB,EAAMoB,GAASpB,EAAMiB,KAIlD,uBAAQ9B,UAAU,gBAChB,uBAAQA,UAAU,aAChB,kBAACmC,EAAA,EAAD,MACA,kBAAC,IAAD,CACEC,MAAM,OACN1C,YAAY,kLAEZV,KAAK,SAEP,kBAACqD,EAAA,EAAD,KACE,oCACE,yBAAKrC,UAAU,kBACb,wBAAIA,UAAU,iBAAd,QAEF,uBAAKsC,OAAQ,CAAC,GAAI,KAEfzB,EACEY,OAAOc,GAA8C,mBAAvCV,EAAQU,EAAIrB,KAAKzB,MAAMC,aACrCsB,IAAIuB,GACH,uBAAKC,IAAKD,EAAIrB,KAAKzB,KAAMgD,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GACnD,kBAAC,EAAD,CACEpD,IAAK+C,EAAIrB,KAAK2B,gBAAgBC,MAAMC,IACpCtD,KAAM8C,EAAIrB,KAAKzB,KACfC,YAAamC,EAAQU,EAAIrB,KAAKzB,MAAMC,YACpCC,MAAOkC,EAAQU,EAAIrB,KAAKzB,MAAME","file":"component---src-pages-tags-index-jsx-c3e038e25b1b8e47434a.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tagCard\":\"tags-module--tagCard--2sNqZ\",\"tagImg\":\"tags-module--tagImg--21WVr\",\"pd20px\":\"tags-module--pd20px--1m4en\"};","import { trackCustomEvent } from 'gatsby-plugin-google-analytics';\n\nexport const trackBlog = path => {\n  trackCustomEvent({\n    // string - required - The object that was interacted with (e.g.video)\n    category: 'blog',\n    // string - required - Type of interaction (e.g. 'play')\n    action: 'Click',\n    // number - optional - Numeric value associated with the event. (e.g. A product ID)\n    value: path,\n  });\n};\n\nexport const trackTag = path => {\n  trackCustomEvent({\n    category: 'tag',\n    action: 'Click',\n    value: path,\n  });\n};\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport { trackTag } from '../../track';\nimport Config from '../../../config';\nimport Utils from '../../utils/pageUtils';\nimport style from './tags.module.less';\n\nconst TagCard = props => {\n  const { img, name, description, color } = props;\n  const tagPage = Config.pages.tag;\n\n  return (\n    <Link\n      className={style.tagCard}\n      to={Utils.resolvePageUrl(tagPage, name)}\n      onClick={() => trackTag(Utils.resolvePageUrl(tagPage, name))}\n    >\n      <div className={style.tagCard}>\n        <div\n          className={style.tagImg}\n          style={{\n            backgroundImage: `url(${img})`,\n          }}\n        />\n        <div className={style.pd20px}>\n          <div className=\"textCenter\">\n            <h3 style={{ color: `${color}` }}>#{name}</h3>\n          </div>\n          <p>{description}</p>\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nexport default TagCard;\n","import React from 'react';\nimport { Layout, Row, Col } from 'antd';\nimport { graphql } from 'gatsby';\nimport Header from '../../components/PageLayout/Header';\nimport SEO from '../../components/Seo';\nimport SidebarWrapper from '../../components/PageLayout/Sidebar';\nimport TagCard from '../../components/TagCard';\nimport Config from '../../../config';\n\nconst Tags = ({ data }) => {\n  const {\n    allFile: { edges },\n  } = data;\n  const rawTags = data.allMarkdownRemark.edges\n    .map(edge => edge.node.frontmatter.tags)\n    .reduce((prev, curr) => prev.concat(curr));\n  rawTags.filter((tag, index) => index === rawTags.indexOf(tag)).sort(); // Remove duplicates and sort values\n  const tagData = Config.tags;\n  // 把未分类标签放到最后\n  const i = edges.findIndex(t => t.node.name === '未归类');\n  const i_last = edges.length - 1;\n  if (i !== i_last) {\n    [edges[i], edges[i_last]] = [edges[i_last], edges[i]];\n  }\n\n  return (\n    <Layout className=\"outerPadding\">\n      <Layout className=\"container\">\n        <Header />\n        <SEO\n          title=\"Tags\"\n          description=\"This page consists of various Tags on various technologies that I'll be using\n          to write blogs. You can check the blogs related to the tags by clicking on any of the tags below.\"\n          path=\"tags\"\n        />\n        <SidebarWrapper>\n          <>\n            <div className=\"marginTopTitle\">\n              <h1 className=\"titleSeparate\">#标签</h1>\n            </div>\n            <Row gutter={[30, 20]}>\n              {/* 愚蠢的hardcode，哈哈哈哈哈哈 */}\n              {edges\n                .filter(val => tagData[val.node.name].description !== 'to be added...')\n                .map(val => (\n                  <Col key={val.node.name} xs={24} sm={24} md={12} lg={8}>\n                    <TagCard\n                      img={val.node.childImageSharp.fluid.src}\n                      name={val.node.name}\n                      description={tagData[val.node.name].description}\n                      color={tagData[val.node.name].color}\n                    />\n                  </Col>\n                ))}\n            </Row>\n          </>\n        </SidebarWrapper>\n      </Layout>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  {\n    allMarkdownRemark(filter: { fileAbsolutePath: { regex: \"/index.md$/\" } }) {\n      edges {\n        node {\n          frontmatter {\n            tags\n          }\n        }\n      }\n    }\n    allFile(filter: { relativeDirectory: { eq: \"tags\" } }) {\n      edges {\n        node {\n          name\n          childImageSharp {\n            fluid(maxWidth: 400) {\n              ...GatsbyImageSharpFluid_tracedSVG\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Tags;\n"],"sourceRoot":""}